from __future__ import absolute_import
from __future__ import print_function
# -*- coding: utf-8 -*-
import numpy as np
import pyopencl as cl
import pyopencl.array

class BA08():
    def __init__(self):
        self.coefBA = np.array([[ 1.00000e-02, -5.28830e-01, -4.94290e-01, -7.45510e-01,
        -4.99660e-01,  2.88970e-01, -1.00190e-01,  0.00000e+00,
         6.75000e+00, -6.62200e-01,  1.20000e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.35000e+00, -3.60000e-01,
         7.60000e+02, -6.40000e-01, -1.40000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.02000e-01,  2.67000e-01,  5.69000e-01,  2.62000e-01,
         5.66000e-01],
       [ 2.00000e-02, -5.21920e-01, -4.85080e-01, -7.39060e-01,
        -4.88950e-01,  2.51440e-01, -1.10060e-01,  0.00000e+00,
         6.75000e+00, -6.66000e-01,  1.22800e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.35000e+00, -3.40000e-01,
         7.60000e+02, -6.30000e-01, -1.20000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.02000e-01,  2.67000e-01,  5.69000e-01,  2.62000e-01,
         5.66000e-01],
       [ 3.00000e-02, -4.52850e-01, -4.18310e-01, -6.67220e-01,
        -4.22290e-01,  1.79760e-01, -1.28580e-01,  0.00000e+00,
         6.75000e+00, -6.90100e-01,  1.28300e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.35000e+00, -3.30000e-01,
         7.60000e+02, -6.20000e-01, -1.10000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.07000e-01,  2.76000e-01,  5.78000e-01,  2.74000e-01,
         5.76000e-01],
       [ 5.00000e-02, -2.84760e-01, -2.50220e-01, -4.84620e-01,
        -2.60920e-01,  6.36900e-02, -1.57520e-01,  0.00000e+00,
         6.75000e+00, -7.17000e-01,  1.31700e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.35000e+00, -2.90000e-01,
         7.60000e+02, -6.40000e-01, -1.10000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.16000e-01,  2.86000e-01,  5.89000e-01,  2.86000e-01,
         5.89000e-01],
       [ 7.50000e-02,  7.67000e-03,  4.91200e-02, -2.05780e-01,
         2.70600e-02,  1.17000e-02, -1.70510e-01,  0.00000e+00,
         6.75000e+00, -7.20500e-01,  1.23700e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.55000e+00, -2.30000e-01,
         7.60000e+02, -6.40000e-01, -1.10000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.13000e-01,  3.22000e-01,  6.06000e-01,  3.20000e-01,
         6.06000e-01],
       [ 1.00000e-01,  2.01090e-01,  2.31020e-01,  3.05800e-02,
         2.21930e-01,  4.69700e-02, -1.59480e-01,  0.00000e+00,
         6.75000e+00, -7.08100e-01,  1.11700e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.68000e+00, -2.50000e-01,
         7.60000e+02, -6.00000e-01, -1.30000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.20000e-01,  3.13000e-01,  6.08000e-01,  3.18000e-01,
         6.08000e-01],
       [ 1.50000e-01,  4.61280e-01,  4.86610e-01,  3.01850e-01,
         4.93280e-01,  1.79900e-01, -1.45390e-01,  0.00000e+00,
         6.75000e+00, -6.96100e-01,  9.88400e-02, -1.11300e-02,
         4.50000e+00,  1.00000e+00,  1.86000e+00, -2.80000e-01,
         7.60000e+02, -5.30000e-01, -1.80000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.18000e-01,  2.88000e-01,  5.92000e-01,  2.90000e-01,
         5.94000e-01],
       [ 2.00000e-01,  5.71800e-01,  5.92530e-01,  4.08600e-01,
         6.14720e-01,  5.27290e-01, -1.29640e-01,  1.02000e-03,
         6.75000e+00, -5.83000e-01,  4.27300e-02, -9.52000e-03,
         4.50000e+00,  1.00000e+00,  1.98000e+00, -3.10000e-01,
         7.60000e+02, -5.20000e-01, -1.90000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.23000e-01,  2.83000e-01,  5.96000e-01,  2.88000e-01,
         5.96000e-01],
       [ 2.50000e-01,  5.18840e-01,  5.34960e-01,  3.38800e-01,
         5.77470e-01,  6.08800e-01, -1.38430e-01,  8.60700e-02,
         6.75000e+00, -5.72600e-01,  2.97700e-02, -8.37000e-03,
         4.50000e+00,  1.00000e+00,  2.07000e+00, -3.90000e-01,
         7.60000e+02, -5.20000e-01, -1.60000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.27000e-01,  2.67000e-01,  5.92000e-01,  2.67000e-01,
         5.92000e-01],
       [ 3.00000e-01,  4.38250e-01,  4.45160e-01,  2.53560e-01,
         5.19900e-01,  6.44720e-01, -1.56940e-01,  1.06010e-01,
         6.75000e+00, -5.54300e-01,  1.95500e-02, -7.50000e-03,
         4.50000e+00,  1.00000e+00,  2.14000e+00, -4.40000e-01,
         7.60000e+02, -5.20000e-01, -1.40000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.46000e-01,  2.72000e-01,  6.08000e-01,  2.69000e-01,
         6.08000e-01],
       [ 4.00000e-01,  3.92200e-01,  4.06020e-01,  2.13980e-01,
         4.60800e-01,  7.86100e-01, -7.84300e-02,  2.26200e-02,
         6.75000e+00, -6.44300e-01,  4.39400e-02, -6.26000e-03,
         4.50000e+00,  1.00000e+00,  2.24000e+00, -5.00000e-01,
         7.60000e+02, -5.10000e-01, -1.00000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.41000e-01,  2.67000e-01,  6.03000e-01,  2.67000e-01,
         6.03000e-01],
       [ 5.00000e-01,  1.89570e-01,  1.98780e-01,  9.67000e-03,
         2.63370e-01,  7.68370e-01, -9.05400e-02,  0.00000e+00,
         6.75000e+00, -6.91400e-01,  6.08000e-02, -5.40000e-03,
         4.50000e+00,  1.00000e+00,  2.32000e+00, -6.00000e-01,
         7.60000e+02, -5.00000e-01, -6.00000e-02,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.55000e-01,  2.65000e-01,  6.15000e-01,  2.65000e-01,
         6.15000e-01],
       [ 7.50000e-01, -2.13380e-01, -1.94960e-01, -4.91760e-01,
        -1.08130e-01,  7.51790e-01, -1.40530e-01,  1.03020e-01,
         6.75000e+00, -7.40800e-01,  7.51800e-02, -4.09000e-03,
         4.50000e+00,  1.00000e+00,  2.46000e+00, -6.90000e-01,
         7.60000e+02, -4.70000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.71000e-01,  3.11000e-01,  6.49000e-01,  2.99000e-01,
         6.45000e-01],
       [ 1.00000e+00, -4.68960e-01, -4.34430e-01, -7.84650e-01,
        -3.93300e-01,  6.78800e-01, -1.82570e-01,  5.39300e-02,
         6.75000e+00, -8.18300e-01,  1.02700e-01, -3.34000e-03,
         4.50000e+00,  1.00000e+00,  2.54000e+00, -7.00000e-01,
         7.60000e+02, -4.40000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.73000e-01,  3.18000e-01,  6.54000e-01,  3.02000e-01,
         6.47000e-01],
       [ 1.50000e+00, -8.62710e-01, -7.95930e-01, -1.20902e+00,
        -8.80850e-01,  7.06890e-01, -2.59500e-01,  1.90820e-01,
         6.75000e+00, -8.30300e-01,  9.79300e-02, -2.55000e-03,
         4.50000e+00,  1.00000e+00,  2.66000e+00, -7.20000e-01,
         7.60000e+02, -4.00000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.66000e-01,  3.82000e-01,  6.84000e-01,  3.73000e-01,
         6.79000e-01],
       [ 2.00000e+00, -1.22652e+00, -1.15514e+00, -1.57697e+00,
        -1.27669e+00,  7.79890e-01, -2.96570e-01,  2.98880e-01,
         6.75000e+00, -8.28500e-01,  9.43200e-02, -2.17000e-03,
         4.50000e+00,  1.00000e+00,  2.73000e+00, -7.30000e-01,
         7.60000e+02, -3.80000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.80000e-01,  3.98000e-01,  7.02000e-01,  3.89000e-01,
         7.00000e-01],
       [ 3.00000e+00, -1.82979e+00, -1.74690e+00, -2.22584e+00,
        -1.91814e+00,  7.79660e-01, -4.53840e-01,  6.74660e-01,
         6.75000e+00, -7.84400e-01,  7.28200e-02, -1.91000e-03,
         4.50000e+00,  1.00000e+00,  2.83000e+00, -7.40000e-01,
         7.60000e+02, -3.40000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.66000e-01,  4.10000e-01,  7.00000e-01,  4.01000e-01,
         6.95000e-01],
       [ 4.00000e+00, -2.24656e+00, -2.15906e+00, -2.58228e+00,
        -2.38168e+00,  1.24961e+00, -3.58740e-01,  7.95080e-01,
         6.75000e+00, -6.85400e-01,  3.75800e-02, -1.91000e-03,
         4.50000e+00,  1.00000e+00,  2.89000e+00, -7.50000e-01,
         7.60000e+02, -3.10000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.83000e-01,  3.94000e-01,  7.02000e-01,  3.85000e-01,
         6.98000e-01],
       [ 5.00000e+00, -1.28408e+00, -1.21270e+00, -1.50904e+00,
        -1.41093e+00,  1.42710e-01, -3.90060e-01,  0.00000e+00,
         8.50000e+00, -5.09600e-01, -2.39100e-02, -1.91000e-03,
         4.50000e+00,  1.00000e+00,  2.93000e+00, -7.50000e-01,
         7.60000e+02, -2.91000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         6.01000e-01,  4.14000e-01,  7.30000e-01,  4.37000e-01,
         7.44000e-01],
       [ 7.50000e+00, -1.43145e+00, -1.31632e+00, -1.81022e+00,
        -1.59217e+00,  5.24070e-01, -3.75780e-01,  0.00000e+00,
         8.50000e+00, -3.72400e-01, -6.56800e-02, -1.91000e-03,
         4.50000e+00,  1.00000e+00,  3.00000e+00, -6.92000e-01,
         7.60000e+02, -2.47000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         6.26000e-01,  4.65000e-01,  7.81000e-01,  4.77000e-01,
         7.87000e-01],
       [ 1.00000e+01, -2.15446e+00, -2.16137e+00, -2.53323e+00,
        -2.14635e+00,  4.03870e-01, -4.84920e-01,  0.00000e+00,
         8.50000e+00, -9.82400e-02, -1.38000e-01, -1.91000e-03,
         4.50000e+00,  1.00000e+00,  3.04000e+00, -6.50000e-01,
         7.60000e+02, -2.15000e-01,  0.00000e+00,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         6.45000e-01,  3.55000e-01,  7.35000e-01,  4.77000e-01,
         8.01000e-01],
       [ 0.00000e+00, -5.38040e-01, -5.03500e-01, -7.54720e-01,
        -5.09700e-01,  2.88050e-01, -1.01640e-01,  0.00000e+00,
         6.75000e+00, -6.60500e-01,  1.19700e-01, -1.15100e-02,
         4.50000e+00,  1.00000e+00,  1.35000e+00, -3.60000e-01,
         7.60000e+02, -6.40000e-01, -1.40000e-01,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.02000e-01,  2.65000e-01,  5.66000e-01,  2.60000e-01,
         5.64000e-01],
       [-1.00000e+00,  5.00121e+00,  5.04727e+00,  4.63188e+00,
         5.08210e+00,  1.83220e-01, -1.27360e-01,  0.00000e+00,
         8.50000e+00, -8.73700e-01,  1.00600e-01, -3.34000e-03,
         4.50000e+00,  1.00000e+00,  2.54000e+00, -6.00000e-01,
         7.60000e+02, -5.00000e-01, -6.00000e-02,  1.80000e+02,
         3.00000e+02,  3.00000e-02,  6.00000e-02,  9.00000e-02,
         5.00000e-01,  2.86000e-01,  5.76000e-01,  2.56000e-01,
         5.60000e-01]])
    
    def __call__(self, period, Moment, Vs30, Rjb, FaultType):
        self.Period = period
        self.moment = Moment
        self.faultType = FaultType
        #self.AB11 = AB11

        self.shear_wave = np.array(Vs30).astype(np.float32)
        self.rjb = np.array(Rjb).astype(np.float32)

        # PyOpenCL implementation
        self.CTX = cl.create_some_context()
        self.QUE = cl.CommandQueue(self.CTX)

        self.shearwaveG = cl.array.to_device(self.QUE, self.shear_wave)

    def getCoefs(self, varNames, periodTerm=None):
        if periodTerm is None:
            periodTerm = self.Period
        varIndex = ["Period", "e1", "e2", "e3", "e4", "e5", "e6", "e7",
        "Mh", "c1", "c2", "c3", "Mref", "Rref", "h", "blin", "Vref", 
        "b1", "b2", "V1", "V2", "a1", "pga_low", "a2", "s", "tU", "sTU", 
        "tM", "sTM"]

        varDict = {}
        for v in varNames:
            varDict[v] = self.coefBA[self.coefBA[:,0]==periodTerm][0][varIndex.index(v)]
        return varDict

    def distanceScaling(self, periodTerm=None): # BA08 Eqs. 3 and 4 
        coefDS = self.getCoefs(['h','c1','c2','c3','Mref','Rref'], periodTerm)
        R = np.sqrt(self.rjb**2 + coefDS['h']**2)
        result1 = (coefDS['c1'] + coefDS['c2'] * (self.moment-coefDS['Mref']))*np.log(R/coefDS['Rref']) + coefDS['c3'] * (R-coefDS['Rref'])
        return result1
    
    def magnitudeScaling(self, periodTerm=None): # BA08 Eqs. 5a and 5b
        if self.faultType == 'U':
            UN,SS,NS,RS = 1,0,0,0
        elif self.faultType == 'SS':
            UN,SS,NS,RS = 0,1,0,0
        elif self.faultType == 'NR':
            UN,SS,NS,RS = 0,0,1,0
        elif self.faultType == 'TH':
            UN,SS,NS,RS = 0,0,0,1
        else:
            print("""Fault Type should be in following notation!
            Undefined      : U 
            Strike-slip    : SS
            Normal Fault   : NR
            Reverse/Thrust : TH""")
            raise ValueError

        coefMS = self.getCoefs(['Mh','e1','e2','e3','e4','e5','e6','e7'], periodTerm)
        subTerm = coefMS['e1']*UN + coefMS['e2']*SS + coefMS['e3']*NS + coefMS['e4']*RS

        if self.moment <= coefMS['Mh']:
            return subTerm + coefMS['e5'] * (self.moment-coefMS['Mh']) + coefMS['e6'] * (self.moment-coefMS['Mh'])**2
        else:
            return subTerm + coefMS['e7'] * (self.moment-coefMS['Mh'])

    def pga4nl(self):
        return np.exp(self.distanceScaling(0)+self.magnitudeScaling(0))

    def siteScaling(self):
        coefSS = self.getCoefs(['Vref','blin','a1','a2','V1','V2','b1','b2','Vref','pga_low'])
        #print(coefSS)
        #Fs = Flin + Fnl
        #Linear Term Flin
        Flin = coefSS['blin'] * np.log(self.shear_wave/coefSS['Vref'])
        #print(self.shearwaveG)
        # BA08 Eq. 13
        bNLget = cl.elementwise.ElementwiseKernel(self.CTX,
        "float *bnl, float *vs, float b1, float b2, float v1, float v2, float vref ",
        """

            if ( vs[i] <= v1 ) 
            {
              bnl[i] = b1;
            } 
            else if (( v1 < vs[i]) && (vs[i] <= v2 )) 
            {
              bnl[i] = (b1-b2) * log(vs[i]/v2) / log(v1/v2) + b2;
            } 
            else if (( v2 < vs[i] ) &&   (vs[i] < vref )) 
            {
              bnl[i] = b2*log(vs[i]/vref)/log(v2/vref);
            } 
            else 
            {
                bnl[i] = 0.0;
            }
        """,
        "bNLget")

        bNL = cl.array.empty_like(self.shearwaveG)
        bNLget(bNL, self.shearwaveG, coefSS['b1'], coefSS['b2'], coefSS['V1'], coefSS['V2'], coefSS['Vref'])
        #print(coefSS['b1'], coefSS['b2'], coefSS['V1'], coefSS['V2'], coefSS['Vref'])
        #print(bNL.get())
        # BA08 Eq. 12
        dy = bNL.get()*np.log(coefSS['a2']/coefSS['pga_low'])
        # BA08 Eq. 11
        dx = np.log(coefSS['a2']/coefSS['a1'])
        # BA08 Eq. 10
        d = -1 * (2*dy-bNL.get()*dx)/(dx**3)
        # BA08 Eq. 9
        c = (3*dy-bNL.get()*dx)/(dx**2)

        # Eqs. 8a, 8b, 8c
        pga4nl = self.pga4nl()

        getFNL = cl.elementwise.ElementwiseKernel(self.CTX, 
            "float *fnl, float *pg4, float *bnl, float pgl, float a1, float a2, float *dd, float *cc",
            """
              if (pg4[i]<= a1) {
                fnl[i]=bnl[i] * log(pgl/0.1);
              } else if ((a1 < pg4[i]) && (pg4[i]< a2)) {
                fnl[i] = bnl[i] * log(pgl/0.1) + cc[i] * pow(log(pg4[i]/a1),2) + dd[i] * pow(log(pg4[i]/a1),3);
              } else if ( a2 < pg4[i] ) {
                  fnl[i] = bnl[i] * log(pg4[i]/0.1);
              }
            """,
            "getFNL")
        dd = np.array(d).astype(np.float32)
        dd = cl.array.to_device(self.QUE, dd)
        cc = np.array(c).astype(np.float32)
        cc = cl.array.to_device(self.QUE, c)

        _bnl = np.array(bNL.get()).astype(np.float32)
        _bnl = cl.array.to_device(self.QUE, _bnl)
        _pg4 = np.array(pga4nl).astype(np.float32)
        _pg4 = cl.array.to_device(self.QUE, _pg4)
        Fnl = cl.array.empty_like(self.shearwaveG)
        getFNL(Fnl, _pg4, _bnl, coefSS['pga_low'], coefSS['a1'], coefSS['a2'], dd, cc)
        """
        if pga4nl <= coefSS['a1']:
            Fnl = bNL.get() * np.log(coefSS['pga_low']/0.1)
        elif coefSS['a1'] < pga4nl <= coefSS['a2']:
            Fnl = bNL.get() * np.log(coefSS['pga_low']/0.1) + c * (np.log(pga4nl/coefSS['a1']))**2 + d * (np.log(pga4nl/coefSS['a1']))**3
        elif coefSS['a2'] < pga4nl:
            Fnl = bNL.get() * np.log(pga4nl/0.1)
        #print(Flin, Fnl, bNL.get())
        """
        return Flin + Fnl.get()


    def get_SA(self):
        
        SA = self.distanceScaling() + self.magnitudeScaling() + self.siteScaling()
        return np.exp(SA)
        
    def get_STD(self):
        coefSTD = self.getCoefs(["s", "tU", "sTU", "tM", "sTM"])
        if self.faultType == 'U':
            return (coefSTD['sTU'], coefSTD['tU'], coefSTD['s'])
        else:
            return (coefSTD['sTM'], coefSTD['tM'], coefSTD['s'])
