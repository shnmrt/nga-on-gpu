from __future__ import absolute_import
from __future__ import print_function
# -*- coding: utf-8 -*-
import numpy as np
from scipy import interpolate
import pyopencl as cl
import pyopencl.array

class CY14():
    def __init__(self):
        self.coefCY = np.array([[ 1.00000e-02,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.50650e+00,
         1.65000e-01, -2.55000e-01, -1.65000e-01,  2.55000e-01,
         1.60875e+01,  4.99930e+00,  1.96360e+00,  6.45510e+00,
         3.09560e+00,  4.90800e-01,  3.52000e-02,  4.62000e-02,
         4.83300e-01,  9.22800e-01,  1.20200e-01,  6.86070e+00,
         0.00000e+00, -4.53600e-01, -7.14600e-03, -6.75800e-03,
         4.25420e+00, -5.21000e-01, -1.41700e-01, -7.01000e-03,
         1.02151e-01,  0.00000e+00,  3.00000e+02,  4.00000e-01,
         2.60000e-01,  4.91200e-01,  3.76200e-01,  8.00000e-01,
         4.52800e-01,  1.58170e+00,  7.59400e-01, -6.84600e-01,
         4.59000e-01,  8.00000e+02],
       [ 2.00000e-02,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.47980e+00,
         1.65000e-01, -2.55000e-01, -1.65000e-01,  2.55000e-01,
         1.57118e+01,  4.99930e+00,  1.96360e+00,  6.45510e+00,
         3.09630e+00,  4.92500e-01,  3.52000e-02,  4.72000e-02,
         1.21440e+00,  9.29600e-01,  1.21700e-01,  6.86970e+00,
         0.00000e+00, -4.53600e-01, -7.24900e-03, -6.75800e-03,
         4.23860e+00, -5.05500e-01, -1.36400e-01, -7.27900e-03,
         1.08360e-01,  0.00000e+00,  3.00000e+02,  4.02600e-01,
         2.63700e-01,  4.90400e-01,  3.76200e-01,  8.00000e-01,
         4.55100e-01,  1.57400e+00,  7.60600e-01, -6.68100e-01,
         4.58000e-01,  8.00000e+02],
       [ 3.00000e-02,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.29720e+00,
         1.65000e-01, -2.55000e-01, -1.65000e-01,  2.55000e-01,
         1.58819e+01,  4.99930e+00,  1.96360e+00,  6.45510e+00,
         3.09740e+00,  4.99200e-01,  3.52000e-02,  5.33000e-02,
         1.64210e+00,  9.39600e-01,  1.19400e-01,  6.91130e+00,
         0.00000e+00, -4.53600e-01, -7.86900e-03, -6.75800e-03,
         4.25190e+00, -4.36800e-01, -1.40300e-01, -7.35400e-03,
         1.19888e-01,  0.00000e+00,  3.00000e+02,  4.06300e-01,
         2.68900e-01,  4.98800e-01,  3.84900e-01,  8.00000e-01,
         4.57100e-01,  1.55440e+00,  7.64200e-01, -6.31400e-01,
         4.62000e-01,  8.00000e+02],
       [ 4.00000e-02,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.10070e+00,
         1.65000e-01, -2.55000e-01, -1.65000e-01,  2.55000e-01,
         1.64556e+01,  4.99930e+00,  1.96360e+00,  6.45510e+00,
         3.09880e+00,  5.03700e-01,  3.52000e-02,  5.96000e-02,
         1.94560e+00,  9.66100e-01,  1.16600e-01,  7.02710e+00,
         0.00000e+00, -4.53600e-01, -8.31600e-03, -6.75800e-03,
         4.29600e+00, -3.75200e-01, -1.59100e-01, -6.97700e-03,
         1.33641e-01,  0.00000e+00,  3.00000e+02,  4.09500e-01,
         2.73600e-01,  5.04900e-01,  3.91000e-01,  8.00000e-01,
         4.64200e-01,  1.55020e+00,  7.67600e-01, -5.85500e-01,
         4.53000e-01,  8.00000e+02],
       [ 5.00000e-02,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -9.29200e-01,
         1.65000e-01, -2.55000e-01, -1.65000e-01,  2.55000e-01,
         1.76453e+01,  4.99930e+00,  1.96360e+00,  6.45510e+00,
         3.10110e+00,  5.04800e-01,  3.52000e-02,  6.39000e-02,
         2.18100e+00,  9.79400e-01,  1.17600e-01,  7.09590e+00,
         0.00000e+00, -4.53600e-01, -8.74300e-03, -6.75800e-03,
         4.35780e+00, -3.46900e-01, -1.86200e-01, -6.46700e-03,
         1.48927e-01,  0.00000e+00,  3.00000e+02,  4.12400e-01,
         2.77700e-01,  5.09600e-01,  3.95700e-01,  8.00000e-01,
         4.71600e-01,  1.53910e+00,  7.73900e-01, -5.45700e-01,
         4.36000e-01,  8.00000e+02],
       [ 7.50000e-02,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -6.58000e-01,
         1.65000e-01, -2.54000e-01, -1.65000e-01,  2.54000e-01,
         2.01772e+01,  5.00310e+00,  1.96360e+00,  6.45510e+00,
         3.10940e+00,  5.04800e-01,  3.52000e-02,  6.30000e-02,
         2.60870e+00,  1.02600e+00,  1.17100e-01,  7.32980e+00,
         0.00000e+00, -4.53600e-01, -9.53700e-03, -6.19000e-03,
         4.54550e+00, -3.74700e-01, -2.53800e-01, -5.73400e-03,
         1.90596e-01,  0.00000e+00,  3.00000e+02,  4.17900e-01,
         2.85500e-01,  5.17900e-01,  4.04300e-01,  8.00000e-01,
         5.02200e-01,  1.48040e+00,  7.95600e-01, -4.68500e-01,
         3.83000e-01,  8.00000e+02],
       [ 1.00000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -5.61300e-01,
         1.65000e-01, -2.53000e-01, -1.65000e-01,  2.53000e-01,
         1.99992e+01,  5.01720e+00,  1.96360e+00,  6.83050e+00,
         3.23810e+00,  5.04800e-01,  3.52000e-02,  5.32000e-02,
         2.91220e+00,  1.01770e+00,  1.14600e-01,  7.25880e+00,
         0.00000e+00, -4.53600e-01, -9.83000e-03, -5.33200e-03,
         4.76030e+00, -4.44000e-01, -2.94300e-01, -5.60400e-03,
         2.30662e-01,  0.00000e+00,  3.00000e+02,  4.21900e-01,
         2.91300e-01,  5.23600e-01,  4.10400e-01,  8.00000e-01,
         5.23000e-01,  1.40940e+00,  7.93200e-01, -4.98500e-01,
         3.75000e-01,  8.00000e+02],
       [ 1.20000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -5.34200e-01,
         1.65000e-01, -2.52000e-01, -1.65000e-01,  2.52000e-01,
         1.87106e+01,  5.03150e+00,  1.97950e+00,  7.13330e+00,
         3.34070e+00,  5.04800e-01,  3.52000e-02,  4.52000e-02,
         3.10450e+00,  1.00080e+00,  1.12800e-01,  7.23720e+00,
         0.00000e+00, -4.53600e-01, -9.91300e-03, -4.73200e-03,
         4.89630e+00, -4.89500e-01, -3.07700e-01, -5.69600e-03,
         2.53169e-01,  0.00000e+00,  3.00000e+02,  4.24400e-01,
         2.94900e-01,  5.27000e-01,  4.14300e-01,  8.00000e-01,
         5.27800e-01,  1.36820e+00,  7.76800e-01, -5.60300e-01,
         3.77000e-01,  8.00000e+02],
       [ 1.50000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -5.46200e-01,
         1.65000e-01, -2.50000e-01, -1.65000e-01,  2.50000e-01,
         1.66246e+01,  5.05470e+00,  2.03620e+00,  7.36210e+00,
         3.43000e+00,  5.04500e-01,  3.52000e-02,  3.45000e-02,
         3.33990e+00,  9.80100e-01,  1.10600e-01,  7.21090e+00,
         0.00000e+00, -4.53600e-01, -9.89600e-03, -3.80600e-03,
         5.06440e+00, -5.47700e-01, -3.11300e-01, -5.84500e-03,
         2.66468e-01,  0.00000e+00,  3.00000e+02,  4.27500e-01,
         2.99300e-01,  5.30800e-01,  4.19100e-01,  8.00000e-01,
         5.30400e-01,  1.32410e+00,  7.43700e-01, -6.45100e-01,
         3.79000e-01,  8.00000e+02],
       [ 1.70000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -5.85800e-01,
         1.65000e-01, -2.48000e-01, -1.65000e-01,  2.48000e-01,
         1.53709e+01,  5.07040e+00,  2.08230e+00,  7.43650e+00,
         3.46880e+00,  5.03600e-01,  3.52000e-02,  2.83000e-02,
         3.47190e+00,  9.65200e-01,  1.15000e-01,  7.24910e+00,
         0.00000e+00, -4.53600e-01, -9.78700e-03, -3.28000e-03,
         5.13710e+00, -5.92200e-01, -3.06200e-01, -5.95900e-03,
         2.65060e-01,  0.00000e+00,  3.00000e+02,  4.29200e-01,
         3.01700e-01,  5.32800e-01,  4.21700e-01,  8.00000e-01,
         5.31000e-01,  1.30710e+00,  7.21900e-01, -6.98100e-01,
         3.80000e-01,  8.00000e+02],
       [ 2.00000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -6.79800e-01,
         1.65000e-01, -2.44900e-01, -1.65000e-01,  2.44900e-01,
         1.37012e+01,  5.09390e+00,  2.15210e+00,  7.49720e+00,
         3.51460e+00,  5.01600e-01,  3.52000e-02,  2.02000e-02,
         3.64340e+00,  9.45900e-01,  1.20800e-01,  7.29880e+00,
         0.00000e+00, -4.44000e-01, -9.50500e-03, -2.69000e-03,
         5.18800e+00, -6.69300e-01, -2.92700e-01, -6.14100e-03,
         2.55253e-01,  0.00000e+00,  3.00000e+02,  4.31300e-01,
         3.04700e-01,  5.35100e-01,  4.25200e-01,  8.00000e-01,
         5.31200e-01,  1.29310e+00,  6.92200e-01, -7.65300e-01,
         3.84000e-01,  8.00000e+02],
       [ 2.50000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -8.66300e-01,
         1.65000e-01, -2.38200e-01, -1.65000e-01,  2.38200e-01,
         1.12667e+01,  5.13150e+00,  2.25740e+00,  7.54160e+00,
         3.57460e+00,  4.97100e-01,  3.52000e-02,  9.00000e-03,
         3.87870e+00,  9.19600e-01,  1.20800e-01,  7.36910e+00,
         0.00000e+00, -3.53900e-01, -8.91800e-03, -2.12800e-03,
         5.21640e+00, -7.76600e-01, -2.66200e-01, -6.43900e-03,
         2.31541e-01,  0.00000e+00,  3.00000e+02,  4.34100e-01,
         3.08700e-01,  5.37700e-01,  4.29900e-01,  7.99900e-01,
         5.30900e-01,  1.31500e+00,  6.57900e-01, -8.46900e-01,
         3.93000e-01,  8.00000e+02],
       [ 3.00000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.05140e+00,
         1.65000e-01, -2.31300e-01, -1.65000e-01,  2.31300e-01,
         9.19080e+00,  5.16700e+00,  2.34400e+00,  7.56000e+00,
         3.62320e+00,  4.91900e-01,  3.52000e-02, -4.00000e-04,
         4.07110e+00,  8.82900e-01,  1.17500e-01,  6.87890e+00,
         0.00000e+00, -2.68800e-01, -8.25100e-03, -1.81200e-03,
         5.19540e+00, -8.50100e-01, -2.40500e-01, -6.70400e-03,
         2.07277e-01,  1.00000e-03,  3.00000e+02,  4.36300e-01,
         3.11900e-01,  5.39500e-01,  4.33800e-01,  7.99700e-01,
         5.30700e-01,  1.35140e+00,  6.36200e-01, -8.99900e-01,
         4.08000e-01,  8.00000e+02],
       [ 4.00000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.37940e+00,
         1.65000e-01, -2.14600e-01, -1.65000e-01,  2.14600e-01,
         6.54590e+00,  5.23170e+00,  2.47090e+00,  7.57350e+00,
         3.69450e+00,  4.80700e-01,  3.52000e-02, -1.55000e-02,
         4.37450e+00,  8.30200e-01,  1.06000e-01,  6.53340e+00,
         0.00000e+00, -1.79300e-01, -7.26700e-03, -1.27400e-03,
         5.08990e+00, -9.43100e-01, -1.97500e-01, -7.12500e-03,
         1.65464e-01,  4.00000e-03,  3.00000e+02,  4.39600e-01,
         3.16500e-01,  5.42200e-01,  4.39900e-01,  7.98800e-01,
         5.31000e-01,  1.40510e+00,  6.04900e-01, -9.61800e-01,
         4.62000e-01,  8.00000e+02],
       [ 5.00000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  9.91000e-02,  2.69500e-01, -1.65080e+00,
         1.65000e-01, -1.97200e-01, -1.65000e-01,  1.97200e-01,
         5.23050e+00,  5.28930e+00,  2.55670e+00,  7.57780e+00,
         3.74010e+00,  4.70700e-01,  3.52000e-02, -2.78000e-02,
         4.60990e+00,  7.88400e-01,  1.06100e-01,  6.52600e+00,
         0.00000e+00, -1.42800e-01, -6.49200e-03, -1.07400e-03,
         4.78540e+00, -1.00440e+00, -1.63300e-01, -7.43500e-03,
         1.33828e-01,  1.00000e-02,  3.00000e+02,  4.41900e-01,
         3.19900e-01,  5.43300e-01,  4.44600e-01,  7.96600e-01,
         5.31300e-01,  1.44020e+00,  5.50700e-01, -9.94500e-01,
         5.24000e-01,  8.00000e+02],
       [ 7.50000e-01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  1.98200e-01,  2.69500e-01, -2.15110e+00,
         1.65000e-01, -1.62000e-01, -1.65000e-01,  1.62000e-01,
         3.78960e+00,  5.41090e+00,  2.68120e+00,  7.58080e+00,
         3.79410e+00,  4.57500e-01,  3.52000e-02, -4.77000e-02,
         5.03760e+00,  6.75400e-01,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.13800e-01, -5.14700e-03, -1.11500e-03,
         4.33040e+00, -1.06020e+00, -1.02800e-01, -8.12000e-03,
         8.51530e-02,  3.40000e-02,  3.00000e+02,  4.45900e-01,
         3.25500e-01,  5.29400e-01,  4.53300e-01,  7.79200e-01,
         5.30900e-01,  1.52800e+00,  3.58200e-01, -1.02250e+00,
         6.58000e-01,  8.00000e+02],
       [ 1.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -2.53650e+00,
         1.65000e-01, -1.40000e-01, -1.65000e-01,  1.40000e-01,
         3.30240e+00,  5.51060e+00,  2.74740e+00,  7.58140e+00,
         3.81440e+00,  4.52200e-01,  3.52000e-02, -5.59000e-02,
         5.34110e+00,  6.19600e-01,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.06200e-01, -4.27700e-03, -1.19700e-03,
         4.16670e+00, -1.09410e+00, -6.99000e-02, -8.44400e-03,
         5.85950e-02,  6.70000e-02,  3.00000e+02,  4.48400e-01,
         3.29100e-01,  5.10500e-01,  4.59400e-01,  7.50400e-01,
         5.30200e-01,  1.65230e+00,  2.00300e-01, -1.00020e+00,
         7.80000e-01,  8.00000e+02],
       [ 1.50000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -3.06860e+00,
         1.65000e-01, -1.18400e-01, -1.65000e-01,  1.18400e-01,
         2.84980e+00,  5.67050e+00,  2.81610e+00,  7.58170e+00,
         3.82840e+00,  4.50100e-01,  3.52000e-02, -6.30000e-02,
         5.76880e+00,  5.10100e-01,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.02000e-01, -2.97900e-03, -1.67500e-03,
         4.00290e+00, -1.11420e+00, -4.25000e-02, -7.70700e-03,
         3.17870e-02,  1.43000e-01,  3.00000e+02,  4.51500e-01,
         3.33500e-01,  4.78300e-01,  4.68000e-01,  7.13600e-01,
         5.27600e-01,  1.88720e+00,  3.56000e-02, -9.24500e-01,
         9.60000e-01,  8.00000e+02],
       [ 2.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -3.41480e+00,
         1.64500e-01, -1.10000e-01, -1.64500e-01,  1.10000e-01,
         2.54170e+00,  5.79810e+00,  2.85140e+00,  7.58180e+00,
         3.83300e+00,  4.50000e-01,  3.52000e-02, -6.65000e-02,
         6.07230e+00,  3.91700e-01,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.00900e-01, -2.30100e-03, -2.34900e-03,
         3.89490e+00, -1.11540e+00, -3.02000e-02, -4.79200e-03,
         1.97160e-02,  2.03000e-01,  3.00000e+02,  4.53400e-01,
         3.36300e-01,  4.68100e-01,  4.68100e-01,  7.03500e-01,
         5.16700e-01,  2.13480e+00,  0.00000e+00, -8.62600e-01,
         1.11000e+00,  8.00000e+02],
       [ 3.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -3.90130e+00,
         1.16800e-01, -1.04000e-01, -1.16800e-01,  1.04000e-01,
         2.14880e+00,  5.99830e+00,  2.88750e+00,  7.58180e+00,
         3.83610e+00,  4.50000e-01,  1.60000e-02, -5.16000e-02,
         6.50000e+00,  1.24400e-01,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.00300e-01, -1.34400e-03, -3.30600e-03,
         3.79280e+00, -1.10810e+00, -1.29000e-02, -1.82800e-03,
         9.64300e-03,  2.77000e-01,  3.00000e+02,  4.55800e-01,
         3.39800e-01,  4.61700e-01,  4.61700e-01,  7.00600e-01,
         4.91700e-01,  3.57520e+00,  0.00000e+00, -7.88200e-01,
         1.29100e+00,  8.00000e+02],
       [ 4.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -4.24660e+00,
         7.32000e-02, -1.02000e-01, -7.32000e-02,  1.02000e-01,
         1.89570e+00,  6.15520e+00,  2.90580e+00,  7.58180e+00,
         3.83690e+00,  4.50000e-01,  6.20000e-03, -4.48000e-02,
         6.80350e+00,  8.60000e-03,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.00100e-01, -1.08400e-03, -3.56600e-03,
         3.74430e+00, -1.06030e+00, -1.60000e-03, -1.52300e-03,
         5.37900e-03,  3.09000e-01,  3.00000e+02,  4.57400e-01,
         3.41900e-01,  4.57100e-01,  4.57100e-01,  7.00100e-01,
         4.68200e-01,  3.86460e+00,  0.00000e+00, -7.19500e-01,
         1.38700e+00,  8.00000e+02],
       [ 5.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -4.51430e+00,
         4.84000e-02, -1.01000e-01, -4.84000e-02,  1.01000e-01,
         1.72280e+00,  6.28560e+00,  2.91690e+00,  7.58180e+00,
         3.83760e+00,  4.50000e-01,  2.90000e-03, -4.24000e-02,
         7.03890e+00,  0.00000e+00,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.00100e-01, -1.01000e-03, -3.64000e-03,
         3.70900e+00, -9.87200e-01,  0.00000e+00, -1.44000e-03,
         3.22300e-03,  3.21000e-01,  3.00000e+02,  4.58400e-01,
         3.43500e-01,  4.53500e-01,  4.53500e-01,  7.00000e-01,
         4.51700e-01,  3.72920e+00,  0.00000e+00, -6.56000e-01,
         1.43300e+00,  8.00000e+02],
       [ 7.50000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -5.00090e+00,
         2.20000e-02, -1.01000e-01, -2.20000e-02,  1.01000e-01,
         1.57370e+00,  6.54280e+00,  2.93200e+00,  7.58180e+00,
         3.83800e+00,  4.50000e-01,  7.00000e-04, -3.48000e-02,
         7.46660e+00,  0.00000e+00,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.00000e-01, -9.64000e-04, -3.68600e-03,
         3.66320e+00, -8.27400e-01,  0.00000e+00, -1.36900e-03,
         1.13400e-03,  3.29000e-01,  3.00000e+02,  4.60100e-01,
         3.45900e-01,  4.47100e-01,  4.47100e-01,  7.00000e-01,
         4.16700e-01,  2.37630e+00,  0.00000e+00, -5.20200e-01,
         1.46000e+00,  8.00000e+02],
       [ 1.00000e+01,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01, -5.34610e+00,
         1.24000e-02, -1.00000e-01, -1.24000e-02,  1.00000e-01,
         1.52650e+00,  6.74150e+00,  2.93960e+00,  7.58180e+00,
         3.83800e+00,  4.50000e-01,  3.00000e-04, -2.53000e-02,
         7.77000e+00,  0.00000e+00,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -1.00000e-01, -9.50000e-04, -3.70000e-03,
         3.62300e+00, -7.05300e-01,  0.00000e+00, -1.36100e-03,
         5.15000e-04,  3.30000e-01,  3.00000e+02,  4.61200e-01,
         3.47400e-01,  4.42600e-01,  4.42600e-01,  7.00000e-01,
         3.75500e-01,  1.76790e+00,  0.00000e+00, -4.06800e-01,
         1.46400e+00,  8.00000e+02],
       [ 0.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  0.00000e+00,  2.69500e-01, -1.50650e+00,
         1.65000e-01, -2.55000e-01, -1.65000e-01,  2.55000e-01,
         1.60875e+01,  4.99930e+00,  1.96360e+00,  6.45510e+00,
         3.09560e+00,  4.90800e-01,  3.52000e-02,  4.62000e-02,
         4.83300e-01,  9.22800e-01,  1.20200e-01,  6.86070e+00,
         0.00000e+00, -4.53600e-01, -7.14600e-03, -6.75800e-03,
         4.25420e+00, -5.21000e-01, -1.41700e-01, -7.01000e-03,
         1.02151e-01,  0.00000e+00,  3.00000e+02,  4.00000e-01,
         2.60000e-01,  4.91200e-01,  3.76200e-01,  8.00000e-01,
         4.52800e-01,  1.58170e+00,  7.59400e-01, -6.84600e-01,
         4.59000e-01,  8.00000e+02],
       [-1.00000e+00,  1.06000e+00, -2.10000e+00, -5.00000e-01,
         5.00000e+01,  2.15400e-01,  2.69500e-01,  2.35490e+00,
         1.65000e-01, -6.26000e-02, -1.65000e-01,  6.26000e-02,
         3.30240e+00,  5.42300e+00,  2.31520e+00,  5.80960e+00,
         3.05140e+00,  4.40700e-01,  3.24000e-02,  9.70000e-03,
         5.00000e+00,  3.07900e-01,  1.00000e-01,  6.50000e+00,
         0.00000e+00, -3.83400e-01, -1.85200e-03, -7.40300e-03,
         4.34390e+00, -7.93600e-01, -6.99000e-02, -8.44400e-03,
         5.41000e+00,  2.02000e-02,  3.00000e+02,  3.89400e-01,
         2.57800e-01,  4.78500e-01,  3.62900e-01,  7.50400e-01,
         3.91800e-01,  2.23060e+00,  3.35000e-01, -7.96600e-01,
         9.48800e-01,  8.00000e+02]])

    def getCoefs(self, period, varNames):
        varIndex = ['Period','c2','c4','c4a','cRB','c8','c8a','c1','c1a','c1b',
        'c1c','c1d','cn','cM','c3','c5','cHM','c6','c7','c7b','c8b','c9','c9a',
        'c9b','c11','c11b','cg1','cg2','cg3','f1','f2','f3','f4','f5','f6','t1',
        't2','s1','s2','s3','s2,JP','gJp_It','gWn','f1Jp','f5JP','f6JP']

        varDict = {}
        for v in varNames:
            varDict[v] = self.coefCY[self.coefCY[:,0]==period][0][varIndex.index(v)]
        return varDict

    def getZ10(self, vs30, region): # CY14 Eqs. 1 and 2
        vs30 = np.array(vs30)
        if region == 'CA' and region != 'JP':
            Z10 = np.exp(-7.15/4 * np.log((vs30**4+571**4)/(1360**4+571**4)))
        elif region == 'JP':
            Z10 = np.exp(-5.23/2 * np.log((vs30**2+412**2)/(1360**2+412**2)))
        return Z10/1000 #in kms

    def getMeanZtor(self, moment, faultType): # CY14 Eqs. 4 and 5
        if faultType =='NR' or faultType=='SS':
            ztm = max(2.673-1.136*max(moment-4.970,0),0)**2
        elif faultType == 'TH':
            ztm = max(2.704-1.226*max(moment-5.849,0),0)**2
        return ztm

    def fltFunct(self, period, moment, vs30, dipAngle, faultType, region):
        coefFL = self.getCoefs(period, ['c1', 'c1a', 'c1b', 'c1c','c1d', 'c7', 'c7b', 'c11', 'c11b'])
        c1, c1a  = coefFL['c1'],coefFL['c1a']
        c1b, c1c = coefFL['c1b'],coefFL['c1c']
        c1d, c7  = coefFL['c1d'],coefFL['c7']
        c7b, c11 = coefFL['c7b'],coefFL['c11']
        c11b     = coefFL['c11b']
        if faultType == 'NR':
            Fnm,Frv=1,0
        elif faultType =='TH':
            Fnm,Frv=0,1
        else:
            Fnm,Frv=0,0

        mterm = np.cosh(2*max(moment-4.5,0))
        term1 = c1 + (c1a + c1c/mterm)*Frv
        term2 = (c1b+c1d/mterm)*Fnm
        term3 = (c7+c7b/mterm)*(self.getZ10(vs30,region)-self.getMeanZtor(moment, faultType))
        term4 = (c11+c11b/mterm)*(np.cos(np.radians(dipAngle))**2)
        return term1+term2+term3+term4

    def momentFunc(self, period, moment):
        coefMF = self.getCoefs(period, ['c2','c3','cn','cM'])
        c2, c3 = coefMF['c2'], coefMF['c3']
        cn, cM = coefMF['cn'], coefMF['cM']

        term5 = c2*(moment-6) + (c2-c3)/cn * np.log(1+np.exp(cn*(cM-moment)))
        return term5

    def distanceFunc(self, period, moment, rrup):
        coefDF = self.getCoefs(period, ['c4','c5','c6','cHM', 'c4a','cRB','cg1','cg2','cg3'])
        c4, c5 = coefDF['c4'], coefDF['c5']
        c6, cHM = coefDF['c6'], coefDF['cHM']
        c4a = coefDF['c4a']
        cRB, cg1 = coefDF['cRB'], coefDF['cg1']
        cg2, cg3 = coefDF['cg2'], coefDF['cg3']

        rrup = np.array(rrup)
        term6 = c4 * np.log(rrup+c5*np.cosh(c6*max(moment-cHM,0)))
        term7 = (c4a-c4)*np.log(np.sqrt(rrup**2+cRB**2))
        term8 = rrup*(cg1+cg2/(np.cosh(max(moment-cg3,0))))
        return term6+term7+term8

    def directivityFunc(self, period, moment, rrup, DDP):
        rrup = np.array(rrup).astype(np.float32)
        if DDP is None:
            ddp = np.zeros_like(rrup)
        else:
            ddp = DDP
        c8  = self.getCoefs(period, ['c8'])['c8']
        c8a = self.getCoefs(period, ['c8a'])['c8a']
        c8b = self.getCoefs(period, ['c8b'])['c8b']

        cDF = cl.create_some_context()
        qDF = cl.CommandQueue(cDF)
        rrupG = cl.array.to_device(qDF, rrup)
        term9 = cl.array.empty_like(rrupG)
        getterm9 = cl.elementwise.ElementwiseKernel(cDF,
        "float *term9, float *rrupG, float c8, float elem",
        "term9[i]=c8 * max(1-max(rrupG[i]-40,elem)/30,elem)",
        "getterm9"
        )
        getterm9(term9,rrupG,c8,0)
        term9=term9.get()

        term10 = min(max(moment-5.5,0)/0.8,1)*np.exp(-c8a*((moment-c8b)**2) * ddp)

        return term9*term10

    def hangWallFunc(self, period, rjb, rrup, rx, dipAngle, ztor):
        coefHW = self.getCoefs(period, ['c9','c9a','c9b'])
        c9, c9a = coefHW['c9'], coefHW['c9a']
        c9b = coefHW['c9b']

        rjb  = np.array(rjb).astype(np.float32)
        rrup = np.array(rrup).astype(np.float32)
        rx   = np.array(rx).astype(np.float32)
        dA = np.radians(dipAngle)

        cHW = cl.create_some_context()
        qHW = cl.CommandQueue(cHW)

        rjbG = cl.array.to_device(qHW,rjb)
        rrupG = cl.array.to_device(qHW, rrup)
        rxG = cl.array.to_device(qHW, rx)
        term11 = cl.array.empty_like(rjbG)
        getTerm11 = cl.elementwise.ElementwiseKernel(cHW,
        "float *term11, float *rjbG, float *rrupG, float *rxG, float ztor, float dA, float c9, float c9a, float c9b",
        """
            if (rxG[i]<0) {
                term11[i]=0;
            } else {
                term11[i]= c9*cos(dA)*(c9a+(1-c9a)*tanh(rxG[i]/c9b))*(1-sqrt(pow(rjbG[i],2)+pow(ztor,2))/(rrupG[i]+1));
            }
        """,
        "getTerm11"
        )
        getTerm11(term11, rjbG, rrupG, rxG, ztor, dA, c9, c9a, c9b)
        term11=term11.get()
        return term11

    def lnYref(self, period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP):
        lnYref = self.momentFunc(period, moment)+\
        self.distanceFunc(period, moment, rrup) +\
        self.fltFunct(period, moment, vs30, dipAngle, faultType, region)+\
        self.directivityFunc(period, moment, rrup, DDP)+\
        self.hangWallFunc(period, rjb, rrup, rx, dipAngle, ztor)
        return lnYref

    def siteFunc(self, period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP):
        coefSF = self.getCoefs(period,['f1','f2','f3','f4'])
        f1, f2 = coefSF['f1'], coefSF['f2']
        f3, f4 = coefSF['f3'], coefSF['f4']
        if region =='JP':
            f1 = self.getCoefs(period,['f1Jp'])['f1Jp']
        vs30 = np.array(vs30)
        rjb = np.array(rjb)
        rrup = np.array(rrup)
        rx = np.array(rx)

        Yref = np.exp(self.lnYref(period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP))
        term12 = f1*np.minimum(np.log(vs30/1130),0)

        term13 = f2 * (np.exp(f3*np.minimum(vs30,1130)-360) - np.exp(f3*(1130-360))) * np.log((Yref+f4)/f4)

        return term12+term13

    def basinFunc(self, period, moment, vs30, faultType, region):
        vs30 = np.array(vs30)
        coefBF = self.getCoefs(period,['f5','f6'])
        f5, f6 = coefBF['f5'], coefBF['f6']
        if region == 'JP':
            f5 = self.getCoefs(period, ['f5JP'])['f5JP']
            f6 = self.getCoefs(period, ['f6JP'])['f6JP']
        term14 = f5 * (1 - np.exp(-(self.getZ10(vs30, region)-self.getMeanZtor(moment, faultType))/f6))
        return term14

    def getIM(self, period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP):
        IM = self.momentFunc(period,moment)+\
        self.fltFunct(period, moment, vs30, dipAngle, faultType, region)+\
        self.distanceFunc(period,moment,rrup)+\
        self.directivityFunc(period,moment,rrup,DDP)+\
        self.hangWallFunc(period,rjb,rrup,rx,dipAngle,ztor)+\
        self.siteFunc(period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP)+\
        self.basinFunc(period, moment, vs30, faultType, region)
        return np.exp(IM)

    def getNL(self, period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP):
        coefNL = self.getCoefs(period, ['f2','f3','f4'])
        f2, f3, f4 = coefNL['f2'], coefNL['f3'], coefNL['f4']
        yref = np.exp(self.lnYref(period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP))
        vs30 = np.array(vs30)
        b = f2 * (np.exp(f3*(np.minimum(vs30,1130)-360)) - np.exp(f3*(1130-360)))
        return b*yref / (yref+f4)

    def sigmaTau(self, period, moment, NL, vs30Flag, region):
        if vs30Flag == 'M':
            Fmeasure = 1
            Finfer = 0
        else:
            Fmeasure = 0
            Finfer = 1
        coefST = self.getCoefs(period,['s1','s2','s3','t1','t2'])
        s1, s2, s3 = coefST['s1'],coefST['s2'],coefST['s3']
        t1, t2 = coefST['t1'], coefST['t2']
        if region == 'JP':
            s2 = self.getCoefs(period, ['s2,JP'])['s2,JP']

        temp = min(max(moment,5),6.5)-5

        tau = t1 + temp*(t2-t1)/1.5
        sigma = s1 + temp * (s2-s1)/1.5 * np.sqrt(s3*Finfer+0.7*Fmeasure+(1+NL)**2)
        sigmaT = np.sqrt((1+NL)**2*tau*2+sigma**2)
        return sigmaT, sigma, tau

    def calc_NGA(self, period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP, vs30Flag):
        SA=self.getIM(period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP)
        NLi=self.getNL(period, moment, vs30, rjb, rrup, rx, dipAngle, ztor, faultType, region, DDP)
        sT,s,t = self.sigmaTau(period, moment, NLi, vs30Flag, region)
        return SA, sT, s, t
